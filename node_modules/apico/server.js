/**
 * Express module
 * @const {object}
 */
const express = require('express');

/**
 * Express EJS Layouts module
 * @const {object}
 */
const expressLayouts = require('express-ejs-layouts');

/**
 * Path module
 * @const {object}
 */
const path = require('path');

/**
 * File System module
 * @const {object}
 */
const fs = require('fs');

/**
 * Express Session module
 * @const {object}
 */
const session = require('express-session');

/**
 * Register function from locals module
 * @const {function}
 */
const { register } = require('./locals');

/**
 * Cookie Parser module
 * @const {object}
 */
const cookieParser = require('cookie-parser');

/**
 * Express application
 * @const {object}
 */
const app = express();

/**
 * Application root directory
 * @const {string}
 */
const APP_ROOT_DIR = process.cwd();

/**
 * Server instance
 * @type {object}
 */
let server = null;

/**
 * Configure session
 */
app.set('trust proxy', 1); // trust first proxy

app.use(session({
  secret: 'secret key',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: true }
}));

/**
 * Setup cookies
 */
app.use(cookieParser());

/**
 * Parse JSON bodies
 */
app.use(express.json());

/**
 * Serve static files
 */
app.use('/static', express.static('./frontend/dist'));

/**
 * Set the template engine
 */
app.use(expressLayouts);

/**
 * Set the view engine
 */
app.set('view engine', 'ejs');

/**
 * Set the views directory
 */
app.set('views', `./frontend`);

/**
 * Set the default layout
 */
app.set('layout', './shared/layouts/default');

/**
 * Start the server
 * @param {number} p_port - The port number to listen on
 * @param {function} callback - The callback function to execute after the server starts
 */
function start(p_port, callback) {
  require('./index');

  const port = p_port || 3000;
  server = app.listen(port, () => {
    if (typeof callback === 'function') {
      callback();
    }
  });
}

/**
 * Restart the server
 * @param {function} callback - The callback function to execute after the server restarts
 */
function restart(callback) {
  server.close(() => {
    start(callback);
  });
}

/**
 * Require all locals
 */
function requireAllLocals() {
  const locals = path.join(APP_ROOT_DIR, 'locals');
  const locals_files = fs.readdirSync(locals);

  if (locals_files) {
    locals_files.forEach(_f => {
      const f_name = _f.split('.')[0];
      register(f_name, require(`${locals}/${f_name}`));
    });
  }
}

/**
 * Require all routes
 */
function requireAllRoutes() {
  const routes = path.join(APP_ROOT_DIR, 'routes');
  const routes_files = fs.readdirSync(routes);

  if (routes_files) {
    routes_files.forEach(_f => {
      const f_name = _f.split('.')[0];
      require(`${routes}/${f_name}`);
    });
  }
}

/**
 * Require all middlewares
 */
function requireAllMiddlewares() {
  const mws = path.join(APP_ROOT_DIR, 'middlewares');
  const mws_files = fs.readdirSync(mws);

  if (mws_files) {
    mws_files.forEach(_f => {
      const f_name = _f.split('.')[0];
      require(`${mws}/${f_name}`);
    });
  }
}

/**
 * Require all events
 */
function requireAllEvents() {
  const events = path.join(APP_ROOT_DIR, 'events');
  const events_files = fs.readdirSync(events);

  if (events_files) {
    events_files.forEach(_f => {
      const f_name = _f.split('.')[0];
      require(`${events}/${f_name}`);
    });
  }
}

/**
 * Exported module
 */
module.exports = {
  start,
  restart,
  requireAllRoutes,
  requireAllLocals,
  requireAllMiddlewares,
  requireAllEvents,
  app
};

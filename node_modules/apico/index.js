/**
 * Import required modules and files
 */
const fs = require('fs');
const { app, requireAllLocals, requireAllRoutes, requireAllMiddlewares, requireAllEvents } = require('./server.js');
const { view } = require('./view.js');
const { getAll: allLocals } = require('./locals.js');
const { addAppPath,  getAppAndPAramsFromPath } = require('./core.js');

// Import dotenv and configure it to read .env file
require('dotenv').config();


/// Set all apps paths
addAppPath('./frontend/dist/apps');
/// Set if it is an app
app.use(async (req, res, next) => {

  req.app_config = {};

  /**
   * If the method is GET
   */
  if (req.method === 'GET') {
    let url_path = (req.originalUrl === '/') ? 'main' : req.originalUrl.replace('/', '');
    // req.app_config.url_params = req.originalUrl.split('/').slice(2);

    // App path + params
    let obj = getAppAndPAramsFromPath(  url_path  );
    /**
     * If the app exists
     */
    if ( obj.app ) {
      req.app_config.app_exists = true
      req.app_config.app_path = obj.app;
      req.app_config.app_name = obj.app.split('/').filter( item => item != '' ).join('-');
      /**
       * TODO: Make it configurable.
       * If the app has a config file
       */
      if (fs.existsSync(`./frontend/dist/apps/${req.app_config.app_path}/config.json`)) {
        let c = fs.readFileSync(`./frontend/dist/apps/${req.app_config.app_path}/config.json`, "utf8");
        req.app_config = { ...req.app_config, ...JSON.parse(c) };
        req.app_config.params = {};

        /**
         * If app_config does not have params_validation then set it to an empty array.
         */
        if (!req.app_config.params_validation) req.app_config.params_validation = [];

        if( obj.params ) {
          req.app_config.url_params = obj.params;
          for (let i = 0; i < req.app_config.params_validation.length; i++) {
            let pattern = new RegExp(req.app_config.params_validation[i].regex);
            let match = obj.params[i].match(pattern);
  
            if (match) req.app_config.params[req.app_config.params_validation[i].name] = match[0];
            else req.app_config.params[req.app_config.params_validation[i].name] = null;
          }
        }

        
        if (req.app_config.hostname && req.app_config.hostname !== req.hostname) {
            req.app_config.wrong_hostname = true;
            req.app_config.app_exists = false;
            req.app_config.app_path = 'notfound';
            req.app_config.app_name = 'notfound';
            req.app_config.notfound_app = 'notfound'; /// TODO: Make it configurable.
        }
      } else {
        req.app_config.layout = "shared/layouts/default";
        req.app_config.access = "public";
      }
    } else {
      req.app_config.app_exists = false;
      req.app_config.app_path = 'notfound';
      req.app_config.app_name = 'notfound';
      req.app_config.notfound_app = 'notfound'; /// TODO: Make it configurable.
    }
  }
  next();
})

/**
 * Set locals
 * @param {Object} req - The request object
 * @param {Object} res - The response object
 * @param {Function} next - The next middleware function
 */
app.use(async (req, res, next) => {
  // Add locals modules to the res.locals.
  res.locals = allLocals();
  next();
});

/**
 * Middleware to determine if the request is from a browser or a non-browser client
 * @param {Object} req - The request object
 * @param {Object} res - The response object
 * @param {Function} next - The next middleware function
 */
app.use((req, res, next) => {
  const userAgent = req.get('User-Agent');

  if (userAgent && userAgent.includes('Mozilla')) {
    // Assuming 'Mozilla' is present in the User-Agent header for browsers
    req.from_browser = true;
    console.log('Request from a browser');
  } else {
    req.from_browser = false;
    console.log('Request from a non-browser client');
  }

  next();
});

/** Import all middlewares */
requireAllMiddlewares();

/** Import all locals */
requireAllLocals();

/** Import all routes */
requireAllRoutes();

/** Import all Events */
requireAllEvents();

/**
 * All GET routes which were not registered with requireAllRoutes functions will be considered as a route for an app.
 * @param {Object} req - The request object
 * @param {Object} res - The response object
 */
app.get('*', (req, res) => {
  
  view(res, req.app_config);
});

/** Not found page */
app.post('*', (req, res) => {
  res.json({ "message": "Not found!" });
});




/**
 * Logs an error message along with a code and traces the error.
 * @param {number} pCode - The error code.
 * @param {string} pMessage - The error message.
 */
function error(pCode, pMessage) {
    console.error({ "cod": pCode, "messages": pMessage });
    console.trace();
}

/**
 * Generates a version 4 UUID.
 * @returns {string} - The generated UUID.
 */
function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

/**
 * Generates a unique element ID.
 * @returns {string} - The generated element ID.
 */
function elID() {
    return 'afxxx_yxxx_xxxxfa'.replace(/[x]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

/**
 * Creates an HTML element from an HTML string.
 * @param {string} pHtml - The HTML string.
 * @returns {HTMLElement} - The created HTMLElement node.
 */
function htmlToElement(pHtml) {
    var template = document.createElement('template');
    template.innerHTML = pHtml;
    return template.content.childNodes[0];
}

/**
 * Creates an object from node attributes, converting snake-case to camel-case.
 * @param {NamedNodeMap} pAttrs - The node attributes.
 * @returns {Object} - The created object with camel-case attribute names.
 */
function attrsToOptions(pAttrs) {
    let obj = {};
    for (const [k, v] of Object.entries(pAttrs)) {
        let _v = v.value;
        if (typeof _v === "string") {
            if (_v.length === 0 || _v === 'false') _v = false;
            else if (_v === 'true') _v = true;
        }
        if (typeof _v === 'number') {
            if (_v === 0) _v = false;
            else if (_v === 1) _v = true;
        }
        obj[v.name.replace(/(-)(?<=-)[a-z]/g, (a) => { return a.toUpperCase() }).split('-').join('').trim()] = _v;
    }

    return obj;
}

/**
 * Parses a cookie string into an object.
 * @param {string} str - The cookie string.
 * @returns {Object} - The parsed cookie object.
 */
function parseCookie(str) {
    return str
        .split(';')
        .map(v => v.split('='))
        .reduce((acc, v) => {
            acc[decodeURIComponent(v[0].trim())] = decodeURIComponent(v[1].trim());
            return acc;
        }, {});
}

export {
    error,
    uuidv4,
    htmlToElement,
    attrsToOptions,
    elID,
    parseCookie
}
#!/usr/bin/env node
const os = require('os');
const path = require('path');
const fs = require('fs-extra');
const { APP_ROOT_DIR, COMMAND } = require('../consts');

/**
 * @command init - Initialize the project structure.
 * @command g app <app_anme> - Generate a new application
 * @command serve - Run a local server for testing.
 */

/**
 * Runs the specified command.
 * @param {string} p_command - The command to run.
 */
function runCommand(p_command) {
    switch (p_command) {
        case 'init':
            init();
            break;
        case 'g':
            generate();
            break;
        case 'generate':
            generate();
            break;
        case 'serve':
            serve();
            break;
        case 'app':
            generateApplication( process.argv[3] );
            break;
        default:
            invalidCommand();
    }
}

/**
 * Initializes the project structure.
 */
function init() {
    let force = process.argv.includes('--force');
    let folders = [
        'frontend/dist/apps/main',
        'frontend/dist/apps/notfound',
        'frontend/dist/apps/auth/login',
        'frontend/dist/apps/auth/registration',
        'frontend/dist/core/index.js',
        'frontend/dist/core/index.css',
        'frontend/dist/vendor/remixicon/remixicon.css',
        'frontend/shared/layouts/default.ejs',
        'frontend/shared/layouts/auth.ejs',
        'frontend/shared/partials/footer.ejs',
        'frontend/shared/partials/header.ejs',
        'locals/template.js',
        'routes/api.js',
        'events/app_events.js',
        'events/test.js',
        'middlewares/test.js',
        'index.js'
    ];

    folders.forEach(_f => {
        let sourcePath = path.join(path.dirname(__dirname), `/defaults/${_f}`);
        let destinationPath = `${APP_ROOT_DIR}/${_f}`;

        if (fs.existsSync(destinationPath) && !force) {
            console.log(` ${_f} - Exists!`);
        } else {
            fs.copy(sourcePath, destinationPath, (err) => {
                if (err) {
                    console.error(`error copying - ${_f} `, err);
                } else {
                    console.log(` ${_f} - successfully copied!`);
                }
            });
        }
    });
}

/**
 * Generates a new application.
 */
function generate() {
    switch (process.argv[3]) {
        case "app":
            generateApplication(process.argv[4]);
            break;
        case "route":
            generateRoute(process.argv[4]);
            break;
        case "mw":
            generateMiddleware(process.argv[4]);
            break;
        case "local":
            generateLocal(process.argv[4]);
            break;
        case "event":
            generateEvent(process.argv[4]);
            break;
        default:
            console.warn(" Wrong command!");
    }
}

/**
 * Generates a new application.
 * @param {string} app_name - The name of the application.
 */
function generateApplication(app_name) {
    let appName = app_name;

    if (fs.existsSync(`${APP_ROOT_DIR}/frontend/dist/apps/${appName}/index.ejs`)) {
        console.log(` App ${appName} already exists!`);
    } else {
        const sourceFolder = path.dirname(__dirname) + '/defaults/frontend/dist/apps/default';
        const destinationFolder = `${APP_ROOT_DIR}/frontend/dist/apps/${appName}`;

        fs.copy(sourceFolder, destinationFolder, err => {
            if (err) {
                console.error('Error copying folder:', err);
            } else {
                console.log('Folder copied successfully!');
            }
        });
    }
}

/**
 * Generates a new route.
 * @param {string} p_route - The name of the route.
 */
function generateRoute(p_route) {
    let routeName = p_route;

    if (fs.existsSync(`${APP_ROOT_DIR}/defaults/routes/${routeName}`)) {
        console.log(` App ${routeName} already exists!`);
    } else {
        const sourceFolder = path.dirname(__dirname) + '/defaults/routes/';
        const sourceFile = `${sourceFolder}/default.js`;
        const destinationFolder = `${APP_ROOT_DIR}/routes`;

        fs.readFile(sourceFile, 'utf8', (err, data) => {
            if (err) {
                console.error('Error reading source file:', err);
                return;
            }

            const modifiedContent = data.replace(/<% route_name %>/g, routeName);
            const tempFile = path.join(os.tmpdir(), 'tempFile.js');

            fs.writeFile(tempFile, modifiedContent, 'utf8', err => {
                if (err) {
                    console.error('Error writing temporary file:', err);
                    return;
                }

                fs.copy(tempFile, path.join(destinationFolder, `${routeName}.js`), err => {
                    if (err) {
                        console.error('Error copying file:', err);
                    } else {
                        console.log('File copied successfully!');
                    }
                });
            });
        });
    }
}

/**
 * Generates a new middleware.
 * @param {string} p_name - The name of the middleware.
 */
function generateMiddleware(p_name) {
    let name = p_name;

    if (fs.existsSync(`${APP_ROOT_DIR}/defaults/middlewares/${name}`)) {
        console.log(` App ${name} already exists!`);
    } else {
        const sourceFolder = path.dirname(__dirname) + '/defaults/middlewares/';
        const sourceFile = `${sourceFolder}/default.js`;
        const destinationFolder = `${APP_ROOT_DIR}/middlewares`;
        const destinationFile = `${destinationFolder}/${name}.js`;

        fs.copy(sourceFile, destinationFile, err => {
            if (err) {
                console.error('Error copying file:', err);
            } else {
                console.log('File copied successfully!');
            }
        });
    }
}

/**
 * Generates a new local.
 * @param {string} p_name - The name of the local.
 */
function generateLocal(p_name) {
    let name = p_name;

    if (fs.existsSync(`${APP_ROOT_DIR}/defaults/locals/${name}`)) {
        console.log(` App ${name} already exists!`);
    } else {
        const sourceFolder = path.dirname(__dirname) + '/defaults/locals/';
        const sourceFile = `${sourceFolder}/default.js`;
        const destinationFolder = `${APP_ROOT_DIR}/locals`;
        const destinationFile = `${destinationFolder}/${name}.js`;

        fs.copy(sourceFile, destinationFile, err => {
            if (err) {
                console.error('Error copying file:', err);
            } else {
                console.log('File copied successfully!');
            }
        });
    }
}

/**
 * Generates a new event.
 * @param {string} p_name - The name of the event.
 */
function generateEvent(p_name) {
    let name = p_name;

    if (fs.existsSync(`${APP_ROOT_DIR}/defaults/events/${name}`)) {
        console.log(` App ${name} already exists!`);
    } else {
        const sourceFolder = path.dirname(__dirname) + '/defaults/events/';
        const sourceFile = `${sourceFolder}/default.js`;
        const destinationFolder = `${APP_ROOT_DIR}/events`;
        const destinationFile = `${destinationFolder}/${name}.js`;

        fs.copy(sourceFile, destinationFile, err => {
            if (err) {
                console.error('Error copying file:', err);
            } else {
                console.log('File copied successfully!');
            }
        });
    }
}

/**
 * Runs a local server for testing.
 */
function serve() {
    // TODO: Implement serve function
}

/**
 * Displays an error message for an invalid command.
 */
function invalidCommand() {
    console.warn(" Wrong command!");
}


// Run the command
runCommand(COMMAND);